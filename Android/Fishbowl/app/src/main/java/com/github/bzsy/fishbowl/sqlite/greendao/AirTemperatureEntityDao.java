package com.github.bzsy.fishbowl.sqlite.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AIR_TEMPERATURE_ENTITY".
*/
public class AirTemperatureEntityDao extends AbstractDao<AirTemperatureEntity, Long> {

    public static final String TABLENAME = "AIR_TEMPERATURE_ENTITY";

    /**
     * Properties of entity AirTemperatureEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Temperature = new Property(2, Float.class, "temperature", false, "TEMPERATURE");
        public final static Property Heat_index = new Property(3, Float.class, "heat_index", false, "HEAT_INDEX");
        public final static Property Device_id = new Property(4, Integer.class, "device_id", false, "DEVICE_ID");
    };


    public AirTemperatureEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AirTemperatureEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AIR_TEMPERATURE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"TEMPERATURE\" REAL," + // 2: temperature
                "\"HEAT_INDEX\" REAL," + // 3: heat_index
                "\"DEVICE_ID\" INTEGER);"); // 4: device_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AIR_TEMPERATURE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AirTemperatureEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(3, temperature);
        }
 
        Float heat_index = entity.getHeat_index();
        if (heat_index != null) {
            stmt.bindDouble(4, heat_index);
        }
 
        Integer device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(5, device_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AirTemperatureEntity readEntity(Cursor cursor, int offset) {
        AirTemperatureEntity entity = new AirTemperatureEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // temperature
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // heat_index
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // device_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AirTemperatureEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setTemperature(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setHeat_index(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDevice_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AirTemperatureEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AirTemperatureEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
